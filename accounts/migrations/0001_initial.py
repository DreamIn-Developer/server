# Generated by Django 4.0.3 on 2022-04-26 15:50

import accounts.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('nickname', models.CharField(max_length=15, unique=True)),
                ('profile_image', models.URLField(blank=True, default='')),
                ('background_image', models.URLField(blank=True, default='')),
                ('description', models.TextField(blank=True, default='')),
                ('social_id', models.TextField()),
                ('social_type', models.CharField(choices=[('Ka', 'Kakao'), ('Go', 'Google')], default='Ka', max_length=2)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-id'],
            },
            managers=[
                ('objects', accounts.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='MainCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('미술/디자인', 'Art'), ('음악/작곡', 'Music'), ('영상/미디어', 'Media'), ('무용/연극', 'Show')], default='미술/디자인', max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='SubCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('순수예술', 'Fine'), ('조소/조각', 'Ridicule'), ('공예', 'Craft'), ('일러스트', 'Illustration'), ('산업디자인', 'Industrial Design'), ('건축', 'Construct'), ('전통예술', 'Traditional Art'), ('클래식', 'Classic'), ('피아노', 'Piano'), ('밴드', 'Band'), ('작사/작곡', 'Composition'), ('전통음악', 'Traditional Music'), ('K-POP', 'K Pop'), ('모션그래픽', 'Motion Graphic'), ('pd', 'Pd'), ('movie', 'Movie'), ('animation', 'Animation'), ('3D아트', 'Three D'), ('게임그래픽', 'Game Graphic'), ('사진', 'Picture'), ('공연기획', 'Performance'), ('현대무용', 'Modern Dance'), ('연기', 'Acting'), ('각본/각색', 'Scenario')], default='순수예술', max_length=15)),
                ('main', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subcategory', to='accounts.maincategory')),
            ],
        ),
        migrations.CreateModel(
            name='FollowRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follower', to=settings.AUTH_USER_MODEL)),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followed_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='categories',
            field=models.ManyToManyField(to='accounts.subcategory'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
